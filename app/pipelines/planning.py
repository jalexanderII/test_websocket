import json
from typing import AsyncGenerator, List, Optional, Sequence

from pydantic import BaseModel

from app.adapters.ai_adapter import ChatMessage
from app.pipelines.base import AIResponse, BasePipeline
from app.services.ai_service import AIService


class PlanDetails(BaseModel):
    """Details of a plan generated by the AI"""

    steps: List[str]
    reasoning: str
    estimated_time: Optional[int] = None


class PlanningPipeline(BasePipeline):
    """Pipeline that first plans steps then executes them"""

    def __init__(self, ai_service: AIService):
        super().__init__(ai_service)

    def execute(
        self,
        message: str,
        history: Optional[Sequence[ChatMessage]] = None,
    ) -> AsyncGenerator[AIResponse, None]:
        """Execute the pipeline on a message"""

        async def generate():
            # Convert sequence to list for AI service
            history_list = list(history) if history is not None else None

            # First, generate a plan
            yield AIResponse(content="Generating plan...", response_type="stream")
            async for plan in self.ai_service.stream_structured_response(
                f"Plan steps to answer: {message}",
                PlanDetails,
                history=history_list,
            ):
                yield AIResponse(content=json.dumps(plan.model_dump()), response_type="structured")

            # Then execute each step
            for i, step in enumerate(plan.steps, 1):
                yield AIResponse(content=f"\nExecuting step {i}: {step}\n", response_type="stream")
                async for token in self.ai_service.stream_chat_response(
                    f"Execute step {i}: {step}\nContext: {message}",
                    history=history_list,
                ):
                    yield AIResponse(content=token, response_type="stream")

        return generate()
