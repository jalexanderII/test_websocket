[project]
name = "chat-app"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.11"

dependencies = [
    "fastapi[standard]>=0.115.7",
    "uvicorn>=0.27.0",
    "sqlalchemy>=2.0.25",
    "python-dotenv>=1.0.0",
    "openai>=1.6.1",
    "websockets>=12.0",
    "pydantic>=2.5.3",
    "alembic>=1.13.1",
    "asyncio>=3.4.3",
    "python-multipart>=0.0.6",
    "ruff>=0.9.3",
    "sqlalchemy-stubs>=0.4",
    "pytest>=8.3.4",
    "pytest-mock>=3.14.0",
    "redis-data-structures[orjson]>=0.1.24",
    "pytest-cov>=6.0.0",
]

[tool.pytest]
pythonpath = "."

[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "sandbox",
]
src = ["."]
target-version = "py39"
line-length = 120
indent-width = 4
fix = true
extend-exclude = ["./devin/projects/*"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "G", # flake8-logging-format rules
    "LOG", # flake8-logging rules, most of them autofixable
    "PT", # flake8-pytest-style rules
    "TID25", # flake8-tidy-imports rules
    "ASYNC", # subset of flake8-async rules
    "UP",  # pyupgrade
    "ISC",  # Checks for implicit literal string concatenation (auto-fixable)
    # Per rule enables
    "RUF006", # Checks for asyncio dangling task
    "RUF015", # Checks for unnecessary iterable allocation for first element
    "RUF019", # Checks for unnecessary key check
    "RUF100", # Unused noqa (auto-fixable)
    "SIM300", # Checks for conditions that position a constant on the left-hand side of the comparison
              # operator, rather than the right-hand side.
    "B004", # Checks for use of hasattr(x, "__call__") and replaces it with callable(x)
    "B006", # Checks for uses of mutable objects as function argument defaults.
    "B007", # Checks for unused variables in the loop
    "B019", # Use of functools.lru_cache or functools.cache on methods can lead to memory leaks
]
ignore = [
    "D100", # Unwanted; Docstring at the top of every file.
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Unwanted; Docstring at the top of every `__init__.py` file.
    "D105", # Unwanted; See https://lists.apache.org/thread/8jbg1dd2lr2cfydtqbjxsd6pb6q2wkc3
    "D107", # Unwanted; Docstring in every constructor is unnecessary if the class has a docstring.
    "D203",
    "D212", # Conflicts with D213.  Both can not be enabled.
    "PT013", # rule prohibiting e.g. `from pytest import param`
    "PT011", # pytest.raises() is too broad, set the match parameter
    "PT019", # fixture without value is injected as parameter, use @pytest.mark.usefixtures instead
    "F405", # undefined-local-with-import-star-usage
    "UP006", # Use dict instead of Dict
    "UP035",
    "F403", # Allow import *
    # Rules below explicitly set off which could overlap with Ruff's formatter
    # as it recommended by https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    # Except ISC rules
    "W191",
    "E111",
    "E114",
    "E117",
    "D206",
    "D300",
    "Q000",
    "Q001",
    "Q002",
    "Q003",
    "COM812",
    "COM819",
    "E501", # Formatted code may exceed the line length, leading to line-too-long errors.
    "PT023", # Whether to ensure @pytest.mark.foo vs @pytest.mark.foo()
    "B904", # raise-without-from-inside-except
    "E101" # Indentation contains mixed spaces and tabs
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402", "F401", "F811"]
"./tests/*" = ["F841"]

[tool.ruff.lint.flake8-bugbear]
# Allow default arguments like, e.g., `data: List[str] = fastapi.Query(None)`.
extend-immutable-calls = ["fastapi.Depends", "fastapi.Query"]

[tool.ruff.lint.isort]
known-third-party = ["fastapi", "pydantic", "starlette"]
combine-as-imports = true

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true
